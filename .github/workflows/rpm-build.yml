name: Package Java WAR into RPM with JBoss Web Server 5

on:
  release:
    types: [ created ]
    branches: [ releases/v7.2.* ]
  workflow_dispatch:
  pull_request:
    branches: [ releases/v7.2.* ]
  push:
    branches: [ releases/v7.2.* ]
env:
  HEALTH_WAIT_TIME: 200
  RPM_REPO_INIT_WAIT_TIME: 60
  RPM_REPO_NAME: 'openrouteservice-rpm'
  RPM_TESTING_REPO_NAME: 'openrouteservice-rpm-testing'
  RPM_REPO_TESTING_FOLDER: 'testing'
  RPM_REPO_SNAPSHOTS_FOLDER: 'snapshots'
  RPM_REPO_RELEASES_FOLDER: 'releases'
  DOCKER_BASE_IMAGE_TAG: '1'

jobs:
  prepare_docker_images:
    name: Build ${{ matrix.docker_file }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        docker_file: [ dockerfile-ubi8-java17-jws57 ]
        include:
          # If docker_file is dockerfile-ubi8-java17-jws57 set the following environment variables
          - docker_file: dockerfile-ubi8-java17-jws57
            DOCKER_HUB_IMAGE_NAME: heigit/ubi8-java17-jws57
            CONTAINER_NAME: ubi8-java17-jws57
            PUSH_TO_DOCKER_HUB: true
    steps:
      - name: Print Workflow Run ID
        run: |
          echo "Workflow Run ID: ${{ github.run_id }}"

      - name: Print the container logs for debugging
        shell: bash
        run: |
          ##### Print debugging info #####
          echo "github.event_name = ${{ github.event_name }}"
          echo "github.event.action = ${{ github.event.action }}"

      - name: Attach RPM package to release
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.RPM_ORS_PATH }}
          asset_name: ${{ env.RPM_ORS_NAME }}
          asset_content_type: application/x-rpm

      - name: Upload the RPM package to the nexus releases rpm registry
        if: github.event_name == 'release' && github.event.action == 'published'
        run: |
          # Check that the RPM Nexus releases repository exists and fail completely if not.
          .github/utils/check_nexus_repo_exists.sh '${{ secrets.NEXUS_URL }}' '${{ env.RPM_REPO_NAME }}' '${{ secrets.NEXUS_USERNAME }}' '${{ secrets.NEXUS_PASSWORD }}' 'true'
          # Upload the RPM package to the nexus releases rpm registry
          .github/utils/upload_rpm_package.sh '${{ secrets.NEXUS_USERNAME }}' '${{ secrets.NEXUS_PASSWORD }}' '${{ env.RPM_ORS_PATH }}' '${{ steps.job_environment_variables.outputs.rpm_repo_releases_url }}/noarch/${{ env.RPM_ORS_NAME }}'
          .github/utils/upload_rpm_package.sh '${{ secrets.NEXUS_USERNAME }}' '${{ secrets.NEXUS_PASSWORD }}' '${{ env.RPM_SELINUX_PATH }}' '${{ steps.job_environment_variables.outputs.rpm_repo_releases_url }}/noarch/${{ env.RPM_SELINUX_NAME }}'
          # Do a curl request to the releases repository and wait for the repomd.xml to be initialized to ensure a correct repository
          .github/utils/url_check.sh '${{ steps.job_environment_variables.outputs.rpm_repo_releases_url }}/repodata/repomd.xml' 200 ${{ env.RPM_REPO_INIT_WAIT_TIME }}

      - name: Upload the snapshot RPM package to the nexus snapshots rpm registry
        # Only upload if this is a push on a release/v7.2.* branch
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/releases/v7.2.')
        run: |
          # Check that the RPM Nexus snapshots repository exists and fail completely if not.
          .github/utils/check_nexus_repo_exists.sh '${{ secrets.NEXUS_URL }}' '${{ env.RPM_REPO_NAME }}' '${{ secrets.NEXUS_USERNAME }}' '${{ secrets.NEXUS_PASSWORD }}' 'true'
          # Upload the RPM package to the nexus snapshots rpm registry
          .github/utils/upload_rpm_package.sh '${{ secrets.NEXUS_USERNAME }}' '${{ secrets.NEXUS_PASSWORD }}' '${{ env.RPM_ORS_PATH }}' '${{ steps.job_environment_variables.outputs.rpm_repo_snapshots_url }}/noarch/${{ env.RPM_ORS_NAME }}'
          .github/utils/upload_rpm_package.sh '${{ secrets.NEXUS_USERNAME }}' '${{ secrets.NEXUS_PASSWORD }}' '${{ env.RPM_SELINUX_PATH }}' '${{ steps.job_environment_variables.outputs.rpm_repo_snapshots_url }}/noarch/${{ env.RPM_SELINUX_NAME }}'
          # Do a curl request to the releases repository and wait for the repomd.xml to be initialized to ensure a correct repository
          .github/utils/url_check.sh '${{ steps.job_environment_variables.outputs.rpm_repo_snapshots_url }}/repodata/repomd.xml' 200 ${{ env.RPM_REPO_INIT_WAIT_TIME }}

